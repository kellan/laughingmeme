<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://laughingmeme.org//feed.xml" rel="self" type="application/atom+xml" /><link href="https://laughingmeme.org//" rel="alternate" type="text/html" /><updated>2025-04-06T20:34:31+00:00</updated><id>https://laughingmeme.org//feed.xml</id><title type="html">Kellan Elliott-McCrea: Blog</title><subtitle>A personal blog of Kellan Elliott-McCrea. I don&apos;t really know what a &quot;laughing meme&quot; is. It sounded cool in 1999.</subtitle><author><name>Kellan Elliott-McCrea</name></author><entry><title type="html">GDrive to S3</title><link href="https://laughingmeme.org//2024/10/05/drive-to-s3.html" rel="alternate" type="text/html" title="GDrive to S3" /><published>2024-10-05T14:05:30+00:00</published><updated>2024-10-05T14:05:30+00:00</updated><id>https://laughingmeme.org//2024/10/05/drive-to-s3</id><content type="html" xml:base="https://laughingmeme.org//2024/10/05/drive-to-s3.html"><![CDATA[<p>I have <a href="https://takeout.google.com/?pli=1">Google Takeout</a> setup to periodically export to GDrive as a series of 10Gb .zip files. I’ve been meaning to get these over to S3 for a bit in part for backup purposes, and in part because I wanted to futz with the photos.</p>

<p>I’m quite confident I’m not the first person to want to do something like this. But we’ve reached an awkward and unfortunate moment in the Web’s journey where search just doesn’t work very well anymore. Except searching the latent information space of a LLM trained on the entire Web actually works unreasonably well for this sort of thing. Meaning, it is easier to write your own than find an existing solution. That’s going to have all sorts of weird consequences I’m sure.</p>

<p>So here’s my script, <a href="https://gist.github.com/kellan/2a8ff0e614ae96034f5592513f9a717a">gdrive-to-s3.py</a>. It use the <a href="https://googleapis.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html">MediaIoBaseDownload</a> API to fetch files in byte ranges from Gdrive and multi-part S3 uploads which in combination remove the need to read any of these 10Gb files directly into memory or store then locally (either of which would rather rules out running the script on a t2.micro) and instead allows you to stream the data from one storage provider to another in manageable chunk sizes.</p>

<p>I used to leave long running jobs hanging around in load bearing screen sessions all the time. Kind of nice to return to my roots.</p>]]></content><author><name>Kellan Elliott-McCrea</name></author><summary type="html"><![CDATA[I have Google Takeout setup to periodically export to GDrive as a series of 10Gb .zip files. I’ve been meaning to get these over to S3 for a bit in part for backup purposes, and in part because I wanted to futz with the photos.]]></summary></entry><entry><title type="html">Fixed the XML</title><link href="https://laughingmeme.org//2024/08/15/fixed-the-xml.html" rel="alternate" type="text/html" title="Fixed the XML" /><published>2024-08-15T14:05:30+00:00</published><updated>2024-08-15T14:05:30+00:00</updated><id>https://laughingmeme.org//2024/08/15/fixed-the-xml</id><content type="html" xml:base="https://laughingmeme.org//2024/08/15/fixed-the-xml.html"><![CDATA[<p>I broke the XML on my <a href="https://laughingmeme.org/links/index.atom">MLP Atom feed</a> with unescaped HTML. Good times. Retro. Very early this millennia vibe.</p>

<p>I got to visit the <a href="https://validator.w3.org/feed/">W3C Feed Validator</a> which is a time capsule of a site. Confirmed that modern news aggregators for the most part still don’t rely on feeds to be valid XML. Except Slack. Slack’s aggregator apparently does. Got me wondering if it was possibly still <a href="https://github.com/kellan/magpierss">Magpie</a> under the hood as it was in the early days but that seems extremely unlikely.</p>

<p>Anyway, the feed should be back on.</p>]]></content><author><name>Kellan Elliott-McCrea</name></author><summary type="html"><![CDATA[I broke the XML on my MLP Atom feed with unescaped HTML. Good times. Retro. Very early this millennia vibe.]]></summary></entry><entry><title type="html">A Link Blog in the Year 2024</title><link href="https://laughingmeme.org//2024/06/08/a-link-blog-in-2024.html" rel="alternate" type="text/html" title="A Link Blog in the Year 2024" /><published>2024-06-08T14:05:30+00:00</published><updated>2024-06-08T14:05:30+00:00</updated><id>https://laughingmeme.org//2024/06/08/a-link-blog-in-2024</id><content type="html" xml:base="https://laughingmeme.org//2024/06/08/a-link-blog-in-2024.html"><![CDATA[<blockquote>
  <p>My big fantasy for what I’d do with a little free time is start a link blog. This is probably a sad commentary on a half dozen things simultaneously. - <a href="https://fiasco.social/@kellan/112405142226319707">kellan, May 08, 2024</a></p>
</blockquote>

<p>Like many people I’ve been dealing with the collapses of the various systems I relied on for information over the previous decades. After 17 of using Twitter daily and 24 years of using Google daily neither really works anymore. And particular with the <a href="https://laughingmeme.org/2024/05/12/what-we-mean-to-others.html">collapse of the social spaces many of us grew up with</a>, I feel called back to earlier forms of the Internet, like blogs, and in particular, starting a link blog.</p>

<p>This is the very definition of something that no one needs. Technology doesn’t work like this, you can’t solve today’s problems by slavish devotion to earlier forms, its one-way doors all the way down. And certainly no one needs <em>my</em> link blog. I don’t really consume that much media from that many varied sources.</p>

<p>But I’m impressed by the folks who never stopped, <a href="https://www.somebits.com/linkblog/">Nelson</a>, <a href="https://simonwillison.net/">Simon</a>, <a href="https://waxy.org/category/links/">Andy</a>, <a href="https://kottke.org/">Jason</a>, and figure that there is value in the doing, for myself if no one else.</p>

<h3 id="colophon">Colophon</h3>

<p>When dinosaurs roamed the Earth we had books printed on paper by a publisher called <a href="https://www.oreilly.com/">O’Reilly</a>, and in the back there were notes about how the books were made, and they called it a colophon. That’s this section of the blog post.</p>

<p>When dinosaurs roamed the Earth there was also a site called <a href="https://en.wikipedia.org/wiki/Memepool">memepool</a> which for all intents and purposes grew up to become <a href="https://en.wikipedia.org/wiki/Delicious_(website)">del.icio.us</a>, and there was <a href="https://en.wikipedia.org/wiki/Kuro5hin">Kuro5hin</a> (a response to Slashdot), which had a section called “Mindless Link Propagation” or MLP. That term has always stuck with me, and all the various attempts to put link blogs on Laughing Meme over the last 20+ years have been called MLP. And while del.icio.us was ground to dust by being acquired by Yahoo, we still have <a href="https://pinboard.in/">Pinboard.in</a> (which thankfully appears to be largely self sustaining because the maintainer seems to have gone quiet – now that’s good engineering).</p>

<p>Kuro5hin is long gone, but it’s creator, <a href="https://www.nytimes.com/2024/04/17/style/today-in-tabs-rusty-foster-media-gossip-maine.html">Rusty Foster</a> is better known these days for <a href="https://www.todayintabs.com/">Today in Tabs</a>, and so there is someone else who never gave up the links game.</p>

<p>So those are the inspirations: it’s called MLP, and it’s powered by Pinboard.</p>

<p>And in the <a href="http://radar.oreilly.com/archives/2007/03/jedi-build-thei.html">grand tradition of those long ago days</a>, the first step was to <a href="https://github.com/kellan/blogmarks">write my own software to do power all of this</a>. I borrowed heavily from Nelson.</p>

<p>A Github Action fetches tags from Pinboard with <a href="https://pinboard.in/u:kellan/t:mlp/">“mlp”</a> and stores it in a local Sqlite db and checks that into the repo. A another action generates the HTML. A third action, over in the main repo for this blog, fetches the generated HTML and combines it with the Jekyll output for this blog and pushes it to Github Pages. Additional metadata is layered into <a href="https://www.flickr.com/groups/51035612836@N01/discuss/72157594497877875/">“machine tags”</a>.</p>

<p>This follows on <a href="https://laughingmeme.org/2024/05/14/minor-blog-updates.html">my post from last month on discovering Github Actions</a> (half a decade after they launched) and deciding to use it as aggregator, lambda, and cron job. It’s a slow debug cycle, and fiddly YAML, and requires you to hold a very specific mental model of a filesystem you never see, and really is in no way superior to the technologies we hewed from stone and wood in the early days of blogging, but I kind of like it. It was a fun puzzle getting it to work. Kind of like when you have one of those tavern puzzles. You can pretend you sat down and looked at the thing to solve it, but really we all just fiddle until the ring slides over the horseshoe.</p>

<p>I’ll be continuing to futz. But if you consume the whole thing with a well formed feed reader you shouldn’t see the thrash.</p>

<h3 id="what-im-thinking-about">What I’m thinking about</h3>

<p>We’ll see. The point of link blogging, for me, is the doing. So I’m looking forward to learning what I’ll blog about.</p>

<p>That said, some of my persistent interests right now are climate optimism, and separating the wheat and chaff of the transformative technologies that are transformers and LLMs from the abusive hype cycle at the heart of Silicon Valley that has latched on to this tech as its latest scam.</p>

<h3 id="links">Links</h3>

<p><a href="https://laughingmeme.org/links/">Mindless Link Propagation</a>, and a <a href="https://laughingmeme.org/links/index.atom">feed</a>.</p>]]></content><author><name>Kellan Elliott-McCrea</name></author><summary type="html"><![CDATA[My big fantasy for what I’d do with a little free time is start a link blog. This is probably a sad commentary on a half dozen things simultaneously. - kellan, May 08, 2024]]></summary></entry><entry><title type="html">Minor blog updates</title><link href="https://laughingmeme.org//2024/05/14/minor-blog-updates.html" rel="alternate" type="text/html" title="Minor blog updates" /><published>2024-05-14T14:05:30+00:00</published><updated>2024-05-14T14:05:30+00:00</updated><id>https://laughingmeme.org//2024/05/14/minor-blog-updates</id><content type="html" xml:base="https://laughingmeme.org//2024/05/14/minor-blog-updates.html"><![CDATA[<p>Because I use a slightly non-standard Jekyll for this blog I’ve been generating the HTML locally and then rsync’ing that output to a very tiny Linode host versus just letting Github Pages handle the hosting as I do with <a href="https://kellanem.com">kellanem.com</a>.</p>

<p>This weekend I sat down to make it so that HTML generation could run on demand somewhere in the cloud with the rough idea that maybe an AWS Lambda was the answer. In evaluating my options I did what any senior and sophisticated engineering leader would do, I asked ChatGPT. Among the 4 options it suggested was Github Actions, which definitely felt like the most straightforward.</p>

<p>This was my first time ever using Github Actions directly versus vaguely overseeing a team using it, and I was impressed by what good kit it is. Nice to be up-to-date with cutting edge technology circa 2018.</p>

<p>Here is <a href="https://github.com/kellan/laughingmeme/blob/main/.github/workflows/jekyll.yml">my workflow file that runs my tweaked version of Jekyll on every commit and push it to the gh-pages branch</a>. At first I thought I’d keep rsync’ing the generated output to the Linode host, and with a bit of poking and prodding I got that working as a GH Actions as well, but in the end it was just easier to host the site on Pages.</p>

<p>Let me know if you notice anything broken.</p>

<p>(Hmmm, seems like something is happening that reverts the custom domain settings periodically, more investigating todo. <a href="https://github.com/kellan/laughingmeme/commit/5ab9f91def40d60bc33db9ce06c63a6953c3448a">Fixed</a>)</p>]]></content><author><name>Kellan Elliott-McCrea</name></author><summary type="html"><![CDATA[Because I use a slightly non-standard Jekyll for this blog I’ve been generating the HTML locally and then rsync’ing that output to a very tiny Linode host versus just letting Github Pages handle the hosting as I do with kellanem.com.]]></summary></entry><entry><title type="html">What we mean to others</title><link href="https://laughingmeme.org//2024/05/12/what-we-mean-to-others.html" rel="alternate" type="text/html" title="What we mean to others" /><published>2024-05-12T14:05:30+00:00</published><updated>2024-05-12T14:05:30+00:00</updated><id>https://laughingmeme.org//2024/05/12/what-we-mean-to-others</id><content type="html" xml:base="https://laughingmeme.org//2024/05/12/what-we-mean-to-others.html"><![CDATA[<p>Spent some time this weekend at a wedding with a lot of very old friends.</p>

<p>Did we first meet in the 90s providing tech support for tree sitters? Or was it in a muddy field in the Netherlands laying fiber optic cable for a 2001 hackers conference? Or at the Other Side Cafe in Boston debating whether it made sense use RDF as the basis for a syndication format and should it still be called RSS at that point? Oh, it was a Perl conference in Japan, that’s right, I had forgotten about that.</p>

<p>Much like Gen X is sometimes the forgotten generation (or at least we feel that way), the generation of us who grew up with an internet that seemed an unalloyed good fall awkwardly into the middle between those who didn’t grow up with it, and those for whom there has always been the whiff of brimstone, greed, and ruin around the place.</p>

<p>Weddings and their ilk are excellent heritage technologies for reconnecting with community but in mingling it was clear that for so many of us who grew up building our community with the help of prosthestics in the form of social software we find ourselves bereft a bit as the tools slow and then all at once collapse.</p>

<p>Discussion turned as it does in such crowds to whether there is a tool to build (“Does Signal have an API?” “Is email the appropriate technology?”), but for me the key insight was something the officiant (the delightful Yoz Grahame) said during the ceremony.</p>

<blockquote>
  <p>As we get older, and let’s face it we got old, it’s easy to forget what we mean to other people. - Yoz Grahame</p>
</blockquote>

<p>My interpretation of that thought, and what I’m going to try to hold on to, is that while I wouldn’t wish the grinding details of my day to day life on anyone, I cherish knowing what’s up with you, with all the obvious inherent the contradiction therein.</p>]]></content><author><name>Kellan Elliott-McCrea</name></author><summary type="html"><![CDATA[Spent some time this weekend at a wedding with a lot of very old friends.]]></summary></entry><entry><title type="html">Software and its Discontents, Part 3: Rising Cost and Elusive Success</title><link href="https://laughingmeme.org//2023/01/29/software-and-its-discontents-part-3-the-magic.html" rel="alternate" type="text/html" title="Software and its Discontents, Part 3: Rising Cost and Elusive Success" /><published>2023-01-29T12:26:30+00:00</published><updated>2023-01-29T12:26:30+00:00</updated><id>https://laughingmeme.org//2023/01/29/software-and-its-discontents-part-3-the-magic</id><content type="html" xml:base="https://laughingmeme.org//2023/01/29/software-and-its-discontents-part-3-the-magic.html"><![CDATA[<p>This is part 3 in my “Software and its Discontents” series.  This series is the product of speaking with a range of folks in the industry over several months about the sense that something about the current state of tech, startups and software has gone quite wrong.</p>

<p>In <a href="https://laughingmeme.org/2023/01/16/software-and-its-discontents-part-1.html">part 1</a>, I wrote about how the macro-economic environment is driving the timing of this conversation, and in particular the impact that a decade of cheap money had on how we build software, and what the end of that decade means.  In <a href="https://laughingmeme.org/2023/01/23/software-and-its-discontents-part-2-complexity.html">part 2</a>, I explored how building software is counter-intuitively harder today than ever, because the complexity of building software has exploded. This post will build on part 1 and part 2 to talk about how the economics of employing a team of software engineers has changed. </p>

<h3 id="an-aside-layoffs-suck">An aside: layoffs suck</h3>

<p>Layoffs suck. I’ve written about them a bit in <a href="https://kellanem.com/notes/layoff-foundations">Building Layoffs on a Healthy Foundation</a>. If you were recently laid off, especially if you’re vulnerable to our capricious immigration system, you have my sympathy, and please don’t hesitate to ask on the off chance there is something I can do to help. </p>

<p>It is awkward to write about reducing working in tech just to its economic mechanics at the exact moment when many of the most successful and profitable companies in our industry are doing layoffs. My hope for this series is to help people understand this system and how it’s changing, in order to have better tools for shaping the outcomes. Especially for the estimated 50% of the industry who joined in the last 10 years and have known only boom conditions. </p>

<h3 id="getting-paid">Getting paid</h3>

<p>As the boss in <a href="https://www.mcsweeneys.net/articles/macroeconomic-changes-have-made-it-impossible-for-me-to-want-to-pay-you">the recent McSweeney’s article said</a>, “I wish I wanted to pay you, but I don’t.” As a sometimes boss myself, I might say it with more nuance. Let’s assume we all agree that everyone deserves food, shelter, education, health, and meaningful dignified work. (though that is very much not the case in our society). As a boss I can either pay you out of the sustainable profits our company generates or I can compensate you with the money the market has lent me in the form of our company’s valuation. In tech companies, in general, we’re compensated inline with our company’s valuation, which is often many multiples larger than our profits (assuming we have any). Those multiples are driven by Silicon Valley’s (and the SV-adjacent ecosystem’s) special relationship with software.</p>

<h3 id="asymptotic-return-to-scale-is-the-key-math-behind-tech-salaries">Asymptotic return to scale is the key math behind tech salaries</h3>

<p>The Silicon Valley model, at its most basic, is that we spend a relatively small fixed cost upfront to develop software, and then each new customer has near zero marginal cost – they’re just another row in the database after all. In this model once you’ve acquired enough customers to pay back your initial investment all the subsequent customers are pure profit (and that profit can be reinvested into further improving your product and protecting your base). At scale this becomes a machine for printing money. Contrast this to selling a physical product. In that model you have to pay for materials and labor for each and every widget you manufacture.</p>

<p>The equation of low fixed cost and scaling with near zero marginal cost is why “scale” is such a power word in our industry, and justifies ongoing investments in tech that otherwise boggle the mind. </p>

<p>However, as the decade of cheap money recedes, we see that the equation changed while no one was looking.</p>

<h3 id="tech-talent-is-more-expensive-than-ever">Tech talent is more expensive than ever.</h3>

<p>As anyone who has spent any time hiring engineers in the last decade knows: competition, always intense, is now fierce. If you haven’t spent any time hiring engineers, I’ll try to set the scene. The perks at a Google or a Facebook are legend, but perks are only a small fraction of the resources tech companies dedicate to hiring. Speaking with leaders at software companies, many will tell you their number one job is hiring. In fact hiring is one of the most important jobs a tech company has, often spending upwards of 20% of their employee’s working hours on nothing but hiring. This time spent includes:</p>

<ul>
  <li>dedicated sourcing and recruiting staff</li>
  <li>employees working interview loops</li>
  <li>campus and job fair visits</li>
  <li>hiring committees</li>
  <li>content marketing</li>
  <li>conferences</li>
  <li>and so much more.</li>
</ul>

<p>An entire industry has emerged helping candidates prepare for interviews, and another industry in evaluating candidates. Employees can make a serious side income of hundreds of thousands of dollars referring candidates to their firms. A $10k bonus for successfully referring a single candidate isn’t uncommon. Mind-blowing when you consider that average tenure for a tech employee in San Francisco before the pandemic was 18 months.</p>

<p>The competition justified by the potential for asymptotic returns, and the competition driven by structural changes like increased team sizes (as we touched on in <a href="https://laughingmeme.org/2023/01/16/software-and-its-discontents-part-1.html#what-were-we-spending-the-cheap-money-on#what-were-we-spending-the-cheap-money-on">part 1, “what were we spending the cheap money on“</a>), and the simple inflationary pressures of too much money chasing too few potential employees have all, unsurprisingly, driven up salaries.</p>

<p>From 2010 to 2020 software salaries went up roughly 35% – prior to the pandemic and the current wave of inflation. Stock-based compensation practices also became more generous. Practices like annual refreshes, accelerated vesting, and widespread usage of RSUs all became more common in the last decade. As an engineering leader, a key new challenge in the last few years has been ensuring long-tenured employees aren’t unfairly under-compensated compared to new hires, a challenge that has driven change and innovation in equity approaches. The most dramatic percent raises in compensation have gone to early career folks and new grads, with interns regularly making 200% of the US median income. We’ve also started to see management and IC tracks diverge in compensation, heresy among the startups of the previous decade. These costs aren’t just rising in traditional high-cost locations like San Francisco and New York, but globally. Globally we’ve also see rapidly expanding domestic technology ecosystems competing for talent with companies looking to offshore out of high-cost locations, driving demand in markets where employers historically had the leverage. Average compensation in traditionally high talent density, low- and medium-cost locations like India, Poland, and Israel has more than doubled, and during the pandemic, when salaries shot up again, salaries for some specialties were inline with San Francisco. The number of companies shifting to remote-first or hybrid, which had been accelerating before the pandemic, exploded during the pandemic, driving increases in what had been, from a cost perspective, second- and third-tier talent markets. Some companies have gone as far as embracing one pay band globally. </p>

<p>Larger teams with rapidly rising median salaries and narrower compensation windows have put significant pressure on the “relatively low fixed cost” side of the equation.</p>

<h3 id="success-is-more-elusive">Success is more elusive.</h3>

<p>For the decade between 2000-2010, the most important trend to understand what was happening in tech was broadband adoption doubling annually. This was followed rapidly by an even more extreme curve for smartphone adoption. These trends created the opportunity to build thousands of new businesses largely without competition, and with a guaranteed pipeline of new customers. Building a successful technology business in this period was mostly about getting the damn code to run and being there waiting at the end of the conveyor belt as new customers were continuously minted. Those new customers made the theoretical returns to scale a reality, and made them seem like an inevitability. </p>

<p>Twenty years later, things have changed. Broadband and smartphone adoption have largely saturated. There are no new customers moving from snail mail to email, the video store to streaming, classifieds to web advertising, or the filing cabinet to online banking waiting to be snapped up. People have largely already adopted computers and the Internet to assist in their personal and work lives. A company starting today isn’t competing against an incumbent from an earlier technology regime, but a savvy technology native competitor. And the current generation of tech giant monopolists have consistently proven themselves extremely effective at avoiding being disrupted by upstarts. (The effectiveness of the current tech giants has also reinforced their technical and cultural practices without the blunting derision of being seen as “dinosaurs’’, a key contributor to <a href="https://laughingmeme.org/2023/01/23/software-and-its-discontents-part-2-complexity.html#aspirational-complexity">the aesthetic of complexity we talked about in part 2</a>, and a general cargo-culting across the industry)</p>

<p>That changing landscape has led the cheap money to search further afield for opportunities that can be tackled with software.  Companies have pushed into industries that share very little with the return to scale model at the heart of the Silicon Valley tech salary math. We now see businesses with significant physical costs, and high costs per customer like ride sharing, delivery or hardware businesses. We see businesses with high per-customer licensing costs, like the streaming music companies. We see pushes into logistically complex businesses, e.g. health care, where regulatory oversight raises the cost to scale significantly.</p>

<p>Our industry’s constant search for greener fields, jonesing for the same broadband/smartphone adoption high, also drives the goldfish-like optimism characteristic of our industry. The procession of “next big thing, this will change everything” includes: AI, Web3, NFTs, blockchain, chatbots, gig economy, AR, appstores, big data, smart assistants, peer-to-peer, 3D printers, <abbr title="internet of things">IoT</abbr>, <abbr title="social local mobile">SoLoMo</abbr>, feed driven virality, <abbr title="rich internet applications">RIAs</abbr>, virtual worlds, apps, applets, and portals. VR is probably the canonical example as it’s been the next big thing at least 4 times in my career, and I think I missed the first wave, having first shown up for VRML.  </p>

<p>Success is more difficult and elusive than ever. </p>

<p>Much smarter people than I am have pointed out that all this tends to be cyclical. “Technological Revolutions and Financial Capital” by <a href="https://carlotaperez.org/">Carlota Perez</a> is the canonical text on the topic if you wanted to dive into the deep end.</p>

<h3 id="lost-that-magic-feeling">Lost that magic feeling</h3>

<p>The 15 years following the rise of the web was a magical era for many looking to build new businesses. (Also magical for a whole bunch of other reasons that aren’t relevant to this article.) </p>

<p>You could lay out a relatively small amount of capital, hire a software engineering team, and build a wildly successful business that challenged existing industry titans in relatively short order. That expectation still forms the foundation for much of our industry. The decade of low interest rates and cheap money allowed us to put off critical reexamining those narratives. </p>

<p>Instead of re-examining those narratives, we spent. As complexity made software development harder, we hired larger teams, adding more complexity. As blockbuster businesses got harder to build, we spent even more on the talent needed to give us a shot at these increasingly elusive prize. As cost and complexity went up so did the precarity of the house of cards, and the difficulty of seeing a return. </p>

<p>In our current era it would be hard to point to a company more widely respected than Stripe. Now in its 14th year, it still isn’t profitable, still hasn’t gone public, and still primarily operates in a commodity market with well-established competitors.  Compare that to Amazon who IPOed after 3 years, Apple after 4 years, Yahoo after 2 years, Google after 6 years, Netflix after 5 years, and Facebook after 8 years, with Microsoft being the outlier at 11 years.  An IPO isn’t the definition of success, but it points to the new pressures the industry is experiencing, pressures that, among other things, have led to changing expectations in the workplace, and increased conflict between leadership and the workforce, even during a time of prosperity.  Which we’ll talk about in part 4.</p>]]></content><author><name>Kellan Elliott-McCrea</name></author><summary type="html"><![CDATA[This is part 3 in my “Software and its Discontents” series.  This series is the product of speaking with a range of folks in the industry over several months about the sense that something about the current state of tech, startups and software has gone quite wrong.]]></summary></entry><entry><title type="html">Software and its Discontents, Part 2: An Explosion of Complexity</title><link href="https://laughingmeme.org//2023/01/23/software-and-its-discontents-part-2-complexity.html" rel="alternate" type="text/html" title="Software and its Discontents, Part 2: An Explosion of Complexity" /><published>2023-01-23T12:26:30+00:00</published><updated>2023-01-23T12:26:30+00:00</updated><id>https://laughingmeme.org//2023/01/23/software-and-its-discontents-part-2-complexity</id><content type="html" xml:base="https://laughingmeme.org//2023/01/23/software-and-its-discontents-part-2-complexity.html"><![CDATA[<p>This is part 2 in my “Software and its Discontents” series. This series is the product of my asking a bunch of folks about the current state of software engineering, the sense that it is not going well, that people are disillusioned and frustrated. In <a href="https://laughingmeme.org/2023/01/16/software-and-its-discontents-part-1.html">part 1</a> I talked a bit about the macro economic trend, namely the end of the decade of cheap money for tech investments, which is driving this conversation, and shaped some of the changes to the industry over the last decade.</p>

<p><a href="https://laughingmeme.org/2023/01/16/software-and-its-discontents-part-1.html">see: Software and its Discontents, January 2023, Part 1</a> for more context and background.</p>

<p>In my conversations I found 4 interdependent trends that have substantially increased the difficulty of building software.</p>

<ul>
  <li>an explosion in the complexity of software development</li>
  <li>tech talent becoming significantly more expensive</li>
  <li>success becoming more elusive than ever, with startups having “lost that magic feeling”</li>
  <li>conflicts over changing expectations of the work environment</li>
</ul>

<p>Talking primarily to engineering leaders, but also CEOs, VCs, ICs, and other practitioners, the most common response to the question of “has something substantially changed?” is that software, counter intuitively, has gotten harder to build. This is counter intuitive because the tools are orders of magnitude better, the amount of work you can cheaply outsource is nearly miraculous, computers are so damn fast and cheap these days, the quality of resources, much of it free, is off the charts, and the talent pool has exploded, and shows every sign of being smarter and better educated than ever. But software has gotten harder to build in one very particular and important way: it’s gotten more complex.</p>

<p>In both systems thinking and software the term “complex” is a technical one. It refers to the number of distinct parts in a system, and the connections between them. Complex systems are characterized by nonlinearity, randomness, emergence, and surprise. Complexity is why communication and coordination dominate all other costs when it comes to building software. And complexity has exploded. (thank you to <a href="https://www.kitchensoap.com/">John Allspaw</a> for first introducing me to the concept of complexity as opposed to the merely complicated)</p>

<p>Complexity has not only exploded, it’s exploded in multiple distinct ways that have distinct root causes but interact.  I’ve tried to break up the explosion in complexity into the following categories:</p>

<ol>
  <li>The complexity of rising standards</li>
  <li>The complexity of too many choices</li>
  <li>Complexity and technical decision making in the era of abundance</li>
  <li>The complexity of large teams and aging code bases</li>
  <li>Aspirational complexity</li>
</ol>

<p>Some of this complexity is directly attributable to the decade of cheap money, some is just the natural result of our industry maturing. Some of this complexity will be addressable with better practices, better leadership, and a better understanding of the sources of complexity. Some of the complexity is here to stay, and we’ll need to recalibrate our expectations about how difficult it is to build software.</p>

<h3 id="the-complexity-of-rising-standards">The complexity of rising standards</h3>

<p>We expect more of software than we used to. Some of this is customer preference, some is regulation, and some is professional aesthetics.</p>

<p>Regulatory requirements, e.g. around data privacy and financial controls, are significantly more complex than they used to be. GDPR, AADC, DMA, DSA, HADOPI, FOSTA-SESTA, BITV, etc. But also FedRAMP, HIPAA, SOX, not to mention SOC2, and HITRUST, have become critical much earlier in a company’s life cycle, either to access critical customers, critical resources, or both. The regional and geographic variations can be particularly challenging and undermine a key productivity win that early online businesses enjoyed. Amazon, for example, didn’t even bother collecting sales tax in their early days, a price win for customers, but also a massive reduction in complexity vs a multi-geography brick and mortar business. In the early days, we on the Web, were all playing on regulatory easy mode. That window has largely closed. Especially as startups, searching for new problem spaces to deploy their capital and technology, have moved into highly regulated domains, like health, finance, and civic infrastructure.</p>

<p>The web, at its inception, was a triumph of simplicity. Its rapid rise to dominance was driven in large part by how it reduced the complexity of delivering software to customers. It was a single unified platform. It was open and non-proprietary. It was simple by design, built around a stateless protocol and a simple declarative UI paradigm. It was available over the internet and didn’t require anything to be bundled or shipped. These radical simplifications allowed effective asymmetric competition with established players developing desktop software and delivering it via physical media. Over the intervening decades we’ve largely compromised all these simplifying properties of the web. Even when all we’re doing is delivering software via the internet (and not say scooters out of the back of a fleet of vans) we’re now targeting many different platforms: desktop web, mobile web, and also the two dominant and semi-incompatible mobile walled garden ecosystems. Meanwhile state management has become so complex that it is the primary job we adopt heavy frontend frameworks, like React, to help us address. This complexity has driven the need of a specialized frontend engineering discipline, someone who can wrangle a Typescript type system of modular components populated via React Query talking to Apollo GraphQL backed by a gRPC Envoy proxy to a SOA stack. Similarly machine learning, mobile, infra, and backend, have all specialized with their own unique complexities. With multiple specializations, we now have more distinct “resources’’, each with their own work in progress queues, biases, hiring loops, onboarding, culture, sick days, and needs to coordinate. Explosions of complexity.</p>

<p>Rising standards have benefits as well as costs. Regulatory complexity is often driven by regulators’ concern for customers. More directly however, the raised expectations of what success looks like means that customers who were ignored in the early days of tech can no longer be ignored by a team wishing to be successful. Accessibility and internationalization have both become critical for success. In the early days, when broadband and then mobile adoption were rapidly doubling, you could count not just on new customers being regularly minted, but that the vast majority of those new customers would match the demographics of early adopters: young and wealthy, with many of them living in US cities. Even those early web adopters aren’t that young anymore, and a company that is only able to get adoption among some idealized fantasy model of young, perfectly healthy, US consumers isn’t viable in 2023.  But both accessibility and internationalization require higher coordination of software development across previously unexplored dimensions with adaptive designs and translation. And, perforce, at least some of this work your software team is unlikely to be able to evaluate, complicating your acceptance criteria. Complicated processes are a classic source of complexity.</p>

<p>Similarly even without regulatory pressure you need to be designing for safety, security and anti-abuse from day one. Succeeding at defending against the global legions of the poor, bored or both is a high bar and now required at launch.</p>

<h3 id="the-complexity-of-too-many-choices">The complexity of too many choices</h3>

<p>In many ways we’re living through a golden age of software development: more tools than ever, more affordable than ever. I’m old enough to remember when IDEs cost hundreds if not thousands of dollars, and there was a real ecosystem of people selling third party libraries and widgets (advertised in the back of Dr. Dobbs). Today we have more: more tools, more languages, more frameworks, more databases, and more services. Most of these tools represent real progress in terms of increased capabilities, and outsourcing non-core parts of your business. However the range of choice has real impacts on complexity.</p>

<p>Anyone joining a company today is looking at a stack that is at least as bespoke as the worst Not-Invented-Here stacks of the previous era. Rails was Rails, LAMP was LAMP, and while Vercel is better than anything we built for ourselves during that earlier era, it comes with a full manual, and its own quirks. So does Google PubSub versus some shitty solution we built on top of MySQL, and Launch Darkly can do so much more than anything we might have expressed with a shitty YAML config file. Those home rolled systems of an earlier era lacked both features and documentation, but our current systems are just as unique in their composition. Given the huge number of choices and the configurability of each of these professionally developed and documented components, the odds that you’ve seen this exact combination of technologies, tools, and services configured this particular way before is extremely low.  We’re a long way from the era when everyone configured their LAMP app the same way, and a community of practice grew up around it.</p>

<p>Not only is each stack novel to each new team member this cross product of complexity means we have fewer mavens and experts.  At Etsy when we needed to scale PHP we could hire Rasmus. Very few teams these days can find that kind of expert, and fewer of those experts will have seen the relevant scale on that exact stack.</p>

<h3 id="complexity-and-technical-decision-making-in-the-era-of-abundance">Complexity and technical decision making in the era of abundance</h3>

<p>In the conversations I’ve been having with engineering leaders a huge source of anxiety has been the impact that the explosion of technical choices has had on the quality of technical decision making.</p>

<p>As an engineering leader raising the quality of technical decision making is arguably your most important job after building the team itself. Eight years after I left Etsy I’m still getting new notes from people telling me that, no matter how frustrated they were with me at the time, in subsequent jobs they’ve come to appreciate and desperately miss how well defined the “Etsy Way” of building software was.</p>

<p>Today any team that has been around for more than a minute not only has chosen a unique combination of technologies, they’ve changed their mind about it a couple of times, often in logically inconsistent ways. With so many great technologies out there, and so many of them backed by well funded marketing teams (see: cheap money and marketing), it’s never been harder to keep your stack simple, and logically consistent. Many teams have given up entirely and are leaning into developer empowerment and polyglot infrastructures. We’ve collectively taken on the complexity of targeting multiple stacks, their idiosyncrasies, their need for training, and their upgrade cycles due to raising standards, while we’re simultaneously splitting our resources for managing that complexity by taking on the needed training, upgraded cycles, and idiosyncrasies of these complex polyglot stacks. Not to mention the unique interactions of these technologies, with our previous technology choices, which are still lingering in the stack. The real horror stories these days in infrastructure aren’t the load spikes of days of yore (“getting Slashdotted!”) but those complex interactions: how PHP’s GRPC library interacts with Envoy, how Scala’s JSON library tickles Varnish caching issues, how MySQL’s weird implementation of utf8mb4 is incompatible with storing your data literally anywhere else. There is a reason that tech debt has become the favorite bugbear of teams everywhere.</p>

<p>Without standardization in your company, without a small number of well known tools in which you’re developing expertise as a team, the hope that you can grow your team logarithmically but see exponential results is a fantasy. That discipline is harder than ever to enforce.</p>

<h3 id="the-complexity-of-large-teams-and-aging-code-bases">The complexity of large teams and aging code bases</h3>

<p>There is so much to say on the topic of large teams and aging code bases, and so much of it has been covered well elsewhere. I want to focus on just the important changes we’ve seen related to the other trends we’re discussing in this post.</p>

<p>Cheap money and founder friendly funding in the last decade has led to more founder control and deeper pockets. That control means we’re more likely to see attempts at continuity in companies. That means two decades into the Internet era of tech startups and a decade into cheap money, we’re seeing significantly older codebases. Older codebases compound the explosion of technical choices, and the sometimes poor technical decision making. Older codebases, with a longer history, mean more choices. More choices, and a lack of clarity around which of those choices are load bearing means significantly increased complexity for anyone onboarding to the codebase.</p>

<p>Teams are also getting larger, as we discussed in part 1. As teams get larger, complexity goes up for several reasons. First as we slice up responsibility for developing our software into thinner slices there are fewer people who have touched the whole system and have a coherent view of the whole architecture. Coherence is one of the key characteristics we look for in simple architectures, and its absence drives complexity. Additionally large teams spend more time dealing with coordination and are more likely to reach for architecture and abstractions that they hope will reduce coordination costs, aka if I architect this well enough I don’t have to speak to my colleagues. Microservices, event buses, and schema free databases are all examples of attempts to architect our way around coordination. A decade in we’ve learned that these patterns raise the cost of reasoning about a system, during onboarding, during design, and during incidents and outages. Finally, as teams have grown, and individuals’ scope of responsibility have narrowed, resume and promotion driven design has found increasingly fertile ground. How do you stand out as the 500th person maintaining a system you didn’t build? Build something new! And all of the complexity inherent in it. Google, as with so many of the best and most problematic patterns in this era, is well known as the epicenter of this phenomena, but you see it broadly as teams grow.</p>

<h3 id="aspirational-complexity">Aspirational Complexity</h3>

<p>As an industry we’ve always been enamored with new technology and shiny objects. For years it was almost definitional, otherwise why did you go into this industry? Interestingly, even as the job has mainstreamed, the infatuation with complexity has remained, and even grown.</p>

<p>First, complexity lies at the heart of our industry’s mythologies. New people joining the industry are taught our myths about Google, Facebook, Amazon, and a sense that these companies’ approaches are what software is “supposed to” look like. And fewer and fewer people are in position to have a wide enough scope of responsibility to learn pragmatic counter lessons the hard way.</p>

<p>Second, during the era of abundance, when OpEx was easier to deploy than CapEx, cloud and SaaS exploded. These services come backed with significant marketing budgets whose <em>job</em> is to convince you that you <em>need</em> the complexity. Why deploy a database when you could deploy a non-relational datacluster, why deploy a server, when you could deploy a Kubernetes cluster, why build simple web pages when you could use React. Hacker News in particular has an interesting role in this cycle, being both a community driven by industry mythology, and also the marketing arm of a major source of funding for new developer oriented SaaS offerings.  Now your community is reinforcing the message that good software is complex software, and that last year’s technical choices are out of date, and probably why your productivity is suffering.</p>

<p>And it was easier to raise capital if what you’re doing sounds high tech and complicated. Really it was a flywheel of people being able to raise money by sounding complicated and smart, and then spending that money on people who made them feel like they could help solve a hard problem in a complicated and smart way, with everyone getting paid and emotionally validated along the way.  We’ve developed an aesthetics of complexity: the sense that a good system is a complex one, that you should prefer a SPA over a web page, a distributed system over a simple one, a service over a config file, the idea if you aren’t on the latest technology you’re wasting your time, and potentially damaging your career.</p>

<h3 id="the-more-things-change">The more things change</h3>

<p>The race between improved productivity from better tools and the drag of increased complexity, inherent, accidental, and aspirational, isn’t particularly new for our industry. If you talk to people who worked at Sun, SGI, or Oracle at the end of the 90s they’ll quickly point out to you that much of this is cyclical.  The era of cheap money certainly juiced some of these trends, but without other conflicts in the workplace around outcomes and expectations we wouldn’t be at this inflection point.</p>

<p>In <a href="https://laughingmeme.org/2023/01/29/software-and-its-discontents-part-3-the-magic.html">part 3, I’ll contrast how the cost of software engineers has risen significantly at a time when the success for software companies has become more elusive</a>.</p>]]></content><author><name>Kellan Elliott-McCrea</name></author><summary type="html"><![CDATA[This is part 2 in my “Software and its Discontents” series. This series is the product of my asking a bunch of folks about the current state of software engineering, the sense that it is not going well, that people are disillusioned and frustrated. In part 1 I talked a bit about the macro economic trend, namely the end of the decade of cheap money for tech investments, which is driving this conversation, and shaped some of the changes to the industry over the last decade.]]></summary></entry><entry><title type="html">Software and its Discontents, January 2023, Part 1</title><link href="https://laughingmeme.org//2023/01/16/software-and-its-discontents-part-1.html" rel="alternate" type="text/html" title="Software and its Discontents, January 2023, Part 1" /><published>2023-01-16T12:26:30+00:00</published><updated>2023-01-16T12:26:30+00:00</updated><id>https://laughingmeme.org//2023/01/16/software-and-its-discontents-part-1</id><content type="html" xml:base="https://laughingmeme.org//2023/01/16/software-and-its-discontents-part-1.html"><![CDATA[<p>Over the last few months I’ve been intrigued by a question: where is the frustration and disillusionment, so prevalent currently in the software industry, coming from? And, as an engineering leader, what can I learn from this discontent and how should it shape my practices?</p>

<p>This is not a topic that lends itself to a definitive answer, boundless and changing as the conditions are, but in talking with other engineering leaders, executives, CEOs, VCs, and a wide variety of practitioners, I found some trends that felt informative to me, and hopefully to you. I found in talking with folks not a single cause, but several interdependent causes. This isn’t a simple conversation, e.g. about remote vs hybrid, but a decade long set of trends contributing to why software engineering has gotten less successful, strains on labor relationships more pronounced, why managers are so fervent that their job has gotten harder, and why we’re having this discussion at this exact moment.</p>

<p>In this blog post, part 1 in the series, I’m going to try to set the stage for the next few parts by laying out the discontent I’m seeing, and what are some of the causes and trends. In particular I suggest that over the last decade we’ve seen:</p>
<ul>
  <li>an explosion in the complexity of software development</li>
  <li>tech talent become significantly more expensive</li>
  <li>success become more elusive than ever, with startups having “lost that magic feeling”</li>
  <li>conflicts over changing expectations of the work environment</li>
</ul>

<p>Further I believe that we’re having this conversation at this exact moment because we’re at the tail end of a decade of cheap money. The relative ease of raising capital has both contributed to the trends that have brought us to this point of discontent, and allowed us to put off dealing with the challenges it created. Until now.</p>

<p>In future installments I’ll deep dive into the causes and trends, and share some ideas about how we can evolve our practices. I’m hoping this whole series will be useful for people thinking about the current state of the software industry, managers looking to ease their practice, individuals trying to understand the system that they’re operating in, and for anyone who joined our industry in the last decade and is looking for some perspective.</p>

<p>(And a sincere thank you to everyone who read the draft form of this when it was all one long rambling brain dump blog post. I can’t promise it isn’t still a rambling brain dump, but at least now it’s a rambling brain dump broken into sections and installments!)</p>

<h3 id="no-one-is-impressed">“No one is impressed.”</h3>

<p>The earliest signals that caught my attention that we had a phenomena that wasn’t just local to my own experiences was a sharp rise in discontent among three of the groups I speak with regularly: CEOs (and other executives), managers, and senior ICs (staff, principal, etc). “No one is impressed with their tech team”, was how one senior eng leader I spoke with put it.</p>

<p>CEOs, both in private and some in public, have been increasingly vocal about their skepticism regarding their engineering teams’ effectiveness. In public we’ve seen Sundar and Zuckerberg sharing these opinions, with a number of lesser luminaries following along (this is setting aside the toxic clown show that is Musk’s Twitter, and the sycophant he is inspiring). Layoffs have been one of the largest stories in tech this year. Companies have been quick to explain this trend as due to over-hiring during the pandemic. More quietly some have pointed to a shifting focus on profits over growth. But also privately and sometimes publicly the sentiment is that engineering teams just aren’t as productive as executives expect them to be, that the over-hiring represents bloat not just miscalculated ambition. It’s hard to overstate what a dramatic shift this is from how executives spoke about their engineering teams a decade ago, which piqued my interest.</p>

<p>Senior engineers meanwhile are feeling both frustrated and stuck. There is skepticism about whether early career folks are coming into the industry as well prepared as they used to (or into roles where they can be successful whether or not they’re prepared), but “kids these days” has a long history in our industry not to mention in every other human endeavor. Some of the increased pitch of frustration though is coming from the senior engineers’ own struggle to be effective. They feel “stuck”, with “entire chunks of [the] organization working on problems that feel self-inflicted and deploying skilled generalist engineers to seemingly low-value hyper-focused projects.”</p>

<p>Managers meanwhile experience their jobs as having gotten radically harder, caught in the middle of rising expectation and frustration on all sides.</p>

<h3 id="caveat-a-global-pandemic">Caveat: a global pandemic</h3>

<p>One obvious caveat to call out upfront is we all just lived through a multi-year global pandemic that was filled with many tragedies, private and public, and forced all of us to make radical changes to our lives and work. Our industry was both touched relatively lightly given our comparative ease of working from home, and radically transformed as we stayed at home, and learned to do this work in our bedrooms and living rooms, and over Zoom, something very few of us signed up for. I don’t think that it can be overstated what a toll this has taken on all of us, even if the toll was different for each of us. I do, however, believe the trends I’m seeing are distinct from the pandemic, even if they interact heavily, but it’s reasonable to be skeptical of that conclusion. Even if all the changes we’re experiencing are attributable to living through a pandemic, I’m not sure what we do with that insight, so I’ve kept working on exploring these other avenues of understanding.</p>

<h3 id="so-whats-the-problem">So what’s the problem?</h3>

<p>The dominant macro trend is fairly straightforward: interest rates are up. Interest rates being up creates better investment opportunities than tech, therefore tech stocks are down, and venture capital is harder to raise. This is not inherently interesting if we’re trying to learn about engineering and management practices. Stock prices have only ever loosely correlated with how well a company is executing and so the fluctuations only give us loose information about how companies may or may not need to improve execution.</p>

<p>What is interesting is what was hidden by a decade of cheap money that we find exposed as the tide goes out. As that tide has gone out we’re faced with a number of unique challenges, new conditions, broken practices, and dysfunctions which we’ve been able to avoid talking about by throwing money at the problems. And it is those challenges that can make it a uniquely difficult time for software development teams.</p>

<h3 id="what-were-we-spending-the-cheap-money-on">What were we spending the cheap money on?</h3>

<p>One way to understand what has changed is by looking at what we were spending the cheap money on.</p>

<p>Team sizes are up, creating a tight talent market, driving up salaries, with salaries for folks right out of college and early career rising fastest, compressing the compensation ranges. We also saw practices like annual stock refreshes become much more ubiquitous, and the emergence of other employee-friendly equity practices: like no vesting cliffs. All together the cost of paying an engineering team, especially a large team, is up significantly.</p>

<p>Marketing was another major sink for cheap money. This had several knock on effects on the costs of operating a tech company, and in particular engineering practices and costs. Beyond just the marketing budget, heavy investment in marketing has significantly raised companies’ expectations for the quality, scope, and speed of their analytical infrastructure. This has driven significant investment in data engineering talent and infrastructure, supercharged the MarTech SaaS sector (absorbing more of the limited data engineering talent), and required engineering and marketing to work in close partnership, two teams that have not traditionally been close partners.</p>

<p>Cloud and SaaS were major beneficiaries of cheap money with OpEx being much simpler to deploy quickly than CapEx. This is a key driver in the explosion of services that any single company integrates. Increased marketing budgets were also put behind these SaaS offerings, making a virtue of their adoption.</p>

<p>Cheap money has been used to finance startups that are outside of Silicon Valley’s traditional sweet spot; businesses with near zero marginal costs from growth. Instead we see a crop of businesses with significant marginal costs due to interacting with the physical world, logistical complexity, licensing liabilities, or all of the above and more.</p>

<p>Finally failing is a good way to keep complexity from growing year over year. With cheap money we’ve seen many more companies persisting and pivoting instead of simply folding. This has strained the capabilities of leaders, managers, and software architectures.</p>

<h3 id="a-stage-set">A stage, set</h3>

<p>Thanks for reading part 1 of “Software and its Discontents, January 2023”. If you didn’t already believe we were struggling as an industry, it’s unlikely I’ve convinced you. If you were thinking about it, I hope I provided some systemic perspective on how, why and why now.</p>

<p>In <a href="https://laughingmeme.org/2023/01/23/software-and-its-discontents-part-2-complexity.html">part 2, I’ll be talking about the explosion of complexity we’ve seen in software development</a> over the last decade, and in particular:</p>

<ol>
  <li>The complexity of rising standards</li>
  <li>The complexity of too many choices</li>
  <li>Complexity and technical decision making in the era of abundance</li>
  <li>The complexity of large teams and aging code bases</li>
  <li>Aspirational complexity</li>
</ol>]]></content><author><name>Kellan Elliott-McCrea</name></author><summary type="html"><![CDATA[Over the last few months I’ve been intrigued by a question: where is the frustration and disillusionment, so prevalent currently in the software industry, coming from? And, as an engineering leader, what can I learn from this discontent and how should it shape my practices?]]></summary></entry><entry><title type="html">Full stack</title><link href="https://laughingmeme.org//2022/11/19/full-stack.html" rel="alternate" type="text/html" title="Full stack" /><published>2022-11-19T08:26:30+00:00</published><updated>2022-11-19T08:26:30+00:00</updated><id>https://laughingmeme.org//2022/11/19/full-stack</id><content type="html" xml:base="https://laughingmeme.org//2022/11/19/full-stack.html"><![CDATA[<p><a href="https://xkcd.com/378/"><img src="/img/real_programmers.png" /></a></p>

<p>Apropos of having one of those conversations about how silly the term “full stack”</p>

<p>At my first job in industry you were expected to be full stack, though the term wouldn’t be coined for over a decade.</p>

<p>At the time full stack meant you could:</p>

<ul>
  <li>walk over to the local OEM</li>
  <li>choose a case, CPU, drives, network cards, optical drive, etc</li>
  <li>assemble said pieces into a working server possibly twiddling IRQs as needed</li>
  <li>format drives, acquire and install an operating system, configure the boot loader, and configure PPP and DHCP to get the box online</li>
  <li>download and compile a development toolchain</li>
  <li>compile and configure a web serve and FastCGI</li>
  <li>compile and configure a database, design the schema, write the SQL</li>
  <li>write some code that made SELECTs, generated HTML and accepted form encoded POSTs</li>
  <li>write code that responded to atypical request like dynamically serving images and NPH requests for live updating content</li>
  <li>check the code into CVS</li>
  <li>rack the server, connect directly via a local terminal and configure NICs to talk to datacenter’s network</li>
  <li>configure bind to publish the IP address of the box</li>
</ul>

<p>A small smattering of the things It did not require you to do included:</p>
<ul>
  <li>code collaboratively</li>
  <li>secure your application, as long as you were more secure than Matt’s Script Archive you were good</li>
  <li>support any sophisticated analytics or observability beyond tail -f</li>
  <li>Javascript</li>
  <li>git</li>
  <li>work with product management</li>
  <li>achieve anything resembling scale or uptime - <a href="https://en.wikipedia.org/wiki/C10k_problem">10k concurrent connections was a <em>big deal</em></a></li>
  <li>deal with Jira or any other ticket system</li>
</ul>]]></content><author><name>Kellan Elliott-McCrea</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Boiling water with the lid off</title><link href="https://laughingmeme.org//2022/11/06/boiling-water-with-the-lid-off.html" rel="alternate" type="text/html" title="Boiling water with the lid off" /><published>2022-11-06T22:05:24+00:00</published><updated>2022-11-06T22:05:24+00:00</updated><id>https://laughingmeme.org//2022/11/06/boiling-water-with-the-lid-off</id><content type="html" xml:base="https://laughingmeme.org//2022/11/06/boiling-water-with-the-lid-off.html"><![CDATA[<p>William Gibson once said that he was leaving Twitter (or maybe it was blogging?) because he found it was like <em>“trying to boil water with the lid off”</em>. Good ideas took time to reach their potential and releasing all his ideas early was preventing them from maturing into material for his writing. That line has always stuck with me. (he since seems to have changed his mind, which is great, because <a href="https://twitter.com/GreatDismal">he does good Twitter</a> for however much longer that lasts)</p>

<p>I’ve said it in different ways with each of the posts since I started trying to blog more regularly, but I thought it was worth writing a note dedicated entirely to making the point that this site is explicitly about trying to boil water with the lid off. The project is to publish early, and update, and clean it up as I go, and most importantly as people give me feedback.</p>

<p>As I said in the <a href="/2022/10/11/obsidian-tasks.html">Obsidian tasks post</a>, <em>“The best way to ask a question is to share what you know, and have people tell you what you got wrong.”</em></p>

<p>And I’d encourage you to lower the bar for yourself as well. We’d love to see what you’re thinking about, however unformed. One trick that worked for me to lower the bar was to fork the writing between this site, and very slightly higer bar I hold for myself at <a href="https://kellanem.com/notes/">Notes on engineering leadership</a>. I’m sure I’ll come up with others. (maybe bring back some sort of explicitly shorter form category? or a link blog?)</p>]]></content><author><name>Kellan Elliott-McCrea</name></author><summary type="html"><![CDATA[William Gibson once said that he was leaving Twitter (or maybe it was blogging?) because he found it was like “trying to boil water with the lid off”. Good ideas took time to reach their potential and releasing all his ideas early was preventing them from maturing into material for his writing. That line has always stuck with me. (he since seems to have changed his mind, which is great, because he does good Twitter for however much longer that lasts)]]></summary></entry></feed>